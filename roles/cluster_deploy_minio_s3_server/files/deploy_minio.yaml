apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio-deployment
  labels:
    app: minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      volumes:
      - name: data-dir
        emptyDir: {}
      containers:
      - name: minio
        image: quay.io/minio/minio:latest
        args:
        - server
        - /data
        - --console-address=:9001
        - --anonymous
        ports:
        - containerPort: 9000
        - containerPort: 9001
        volumeMounts:
        - name: data-dir
          mountPath: /data
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            configMapKeyRef:
              name: minio
              key: MINIO_ROOT_USER
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: minio
              key: MINIO_ROOT_PASSWORD
      - name: ubi8 # this container is used to export data out of the container, with tar/oc cp
        image: registry.access.redhat.com/ubi8:latest
        command: [sleep, +inf]
        volumeMounts:
        - name: data-dir
          mountPath: /data
      - name: mc
        image: quay.io/minio/mc:latest
        command: [bash, -cxe]
        args:
        - |
           echo "Waiting for Minio server to launch ..."

           while true; do
             curl -sSf "$MINIO_SERVER_ADDR" > /dev/null || retcode=$?

             [[ $retcode != 7 ]] && break
             sleep 5 # Connection refused, server not ready
           done
           echo "Minio is running, configuring it ..."

           _mc() {
             mc --config-dir /tmp "$@"
           }
           MINIO_SERVER_NAME=minio
           # using 'bash -c' so that the secrets don't get printed by 'set -x'

           # create a local server alias
           bash -c 'echo -e "$MINIO_ROOT_USER\n$MINIO_ROOT_PASSWORD"' \
              | _mc alias set "$MINIO_SERVER_NAME" "$MINIO_SERVER_ADDR"

           # create a user in the server
           bash -c 'echo -e "$MINIO_S3_ACCESS_KEY\n$MINIO_S3_SECRET_KEY"' \
              | _mc admin user add "$MINIO_SERVER_NAME"

           # give privileges to the user
           _mc admin policy set "$MINIO_SERVER_NAME" consoleAdmin "user=$MINIO_S3_ACCESS_KEY"

           # create default bucket
           _mc mb minio/mybucket

           echo "All done, Minio is configured!"
           sleep +inf
        env:
        - name: MINIO_SERVER_ADDR
          value: http://localhost:9000

        - name: MINIO_ROOT_USER
          valueFrom:
            configMapKeyRef:
              name: minio
              key: MINIO_ROOT_USER

        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: minio
              key: MINIO_ROOT_PASSWORD

        - name: MINIO_S3_ACCESS_KEY
          valueFrom:
            configMapKeyRef:
              name: minio
              key: MINIO_S3_ACCESS_KEY

        - name: MINIO_S3_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: minio
              key: MINIO_S3_SECRET_KEY
---
apiVersion: v1
kind: Service
metadata:
  name: minio
spec:
  ports:
  - name: s3
    port: 9000
    targetPort: 9000
    protocol: TCP
  - name: console
    port: 9001
    targetPort: 9001
    protocol: TCP
  selector:
    app: minio
