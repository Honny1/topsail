apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: ci-artifacts
    test: {{ local_ci_run_multi_job_name }}
  name: {{ local_ci_run_multi_job_name }}
  namespace: {{ local_ci_run_multi_namespace }}
spec:
  parallelism: {{ local_ci_run_multi_user_count }}
  completions: {{ local_ci_run_multi_user_count }}
  activeDeadlineSeconds: 18000
  backoffLimit: 0
  completionMode: Indexed
  template:
    metadata:
      name: ods-ci-loadtest
    spec:
      serviceAccount: "{{ local_ci_run_multi_service_account }}"
      containers:
      - name: main
        command:
        - bash
        - -c
        args:
        - |
          set -o errexit
          set -o pipefail
          set -o nounset
          set -o errtrace
          set -x

          trap 'touch "$ARTIFACT_DIR/.local_ci_done"' EXIT

          git config --global --add safe.directory '*'

{% if local_ci_run_multi_git_pull %}

          git fetch origin \
{% if local_ci_run_multi_git_pull is true %}
              "$OPENSHIFT_BUILD_REFERENCE"
{% else %}
              "{{ local_ci_run_multi_git_pull }}"
{% endif %}
          git reset --hard FETCH_HEAD
{% endif %}

{% if local_ci_run_multi_pr_config %}
          cat > "${ARTIFACT_DIR}/variable_overrides" << EOF
          {{ local_ci_run_pr_config_content_cmd.stdout | indent(6) }}
          EOF
{% endif %}

{% if local_ci_run_multi_state_signal_redis_server %}
          # Use StateSignal-barrier to wait for all the Pods to be ready
          echo "Running with user $JOB_COMPLETION_INDEX / $USER_COUNT"
          STATE_SIGNAL_DELAY=-1 # delay for all the Pods to reach the entry barrier
          if [[ $JOB_COMPLETION_INDEX == 0 ]]; then
              python3 "$STATE_SIGNAL_BARRIER" "$REDIS_SERVER" \
                      --exporter "$USER_COUNT" \
                      --delay "$STATE_SIGNAL_DELAY" &
          fi

          echo "statesignal_setup: $(date)" >> "${ARTIFACT_DIR}/progress_ts.yaml"
          if ! python3 "$STATE_SIGNAL_BARRIER" "$REDIS_SERVER"; then
              # fails if the all Pods don't reach the barrier in time
              echo "StateSignal syncrhonization failed :( (errcode=$?)"

              # mark this test as failed
              echo 1 > "$ARTIFACT_DIR/test.exit_code"

              # exit the Pod successfully, so that all the Pod logs are retrieved.
              # without this, we don't know why the 'fail' event was generated.
              exit 0
          fi
          echo "statesignal_ready: $(date)" >> "${ARTIFACT_DIR}/progress_ts.yaml"
{% endif %}

          bash -x /opt/ci-artifacts/src/testing/run {{ local_ci_run_multi_ci_command }} |& tee "${ARTIFACT_DIR}/run.log"
        image: "image-registry.openshift-image-registry.svc:5000/{{ local_ci_run_multi_namespace }}/{{ local_ci_run_multi_istag }}"
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: [ALL]
          seccompProfile:
            type: RuntimeDefault
        runAsNonRoot: True
        env:
        - name: ARTIFACT_DIR
          value: /logs
        - name: KUBECONFIG # Kubernetes is accessed via the in-Pod credentials
          value: ""
{% if local_ci_run_multi_secret_name %}
        - name: {{ local_ci_run_multi_secret_env_key }}
          value: /secrets/{{ local_ci_run_multi_secret_name }}
{% endif %}
        - name: SHARED_DIR # shouldn't be used
          value: /tmp/shared
        - name: USER_COUNT
          value: "{{ local_ci_run_multi_user_count }}"
{% if local_ci_run_multi_state_signal_redis_server %}
        - name: STATE_SIGNAL_BARRIER
          value: subprojects/state-signal-utils/state-signal_barrier.py
        - name: REDIS_SERVER
          value: "{{ local_ci_run_multi_state_signal_redis_server }}"
{% endif %}
        volumeMounts:
        - mountPath: /logs
          name: artifacts
{% if local_ci_run_multi_secret_name %}
        - mountPath: /secrets/{{ local_ci_run_multi_secret_name }}
          name: {{ local_ci_run_multi_secret_name }}
{% endif %}
{% if local_ci_run_multi_retrieve_artifacts %}
      - name: artifacts-exporter
        command:
        - bash
        - -c
        args:
        - |
          set -o errexit
          set -o pipefail
          set -o nounset
          set -o errtrace

          JOB_COMPLETION_INDEX=${JOB_COMPLETION_INDEX:-0}

          echo 'Waiting for the main container to be done ...'
          set +x
          while [[ ! -f "$ARTIFACT_DIR/.local_ci_done" ]]; do
            sleep 1
          done
          set -x
          echo 'The main container is done ...'

          echo 'Exporting to the local S3 server ...'
          export AWS_SHARED_CREDENTIALS_FILE=/tmp/awscreds
          bash -ce '
          source "${{ local_ci_run_multi_secret_env_key }}/{{ local_ci_run_multi_minio_secret_key_key }}"
          cat > $AWS_SHARED_CREDENTIALS_FILE <<EOF
          [default]
          aws_access_key_id = minio
          aws_secret_access_key = $user_password
          EOF'

          S3_ENDPOINT_URL="http://minio.$MINIO_NAMESPACE.svc.cluster.local:9000"
          _aws() {
            aws "--endpoint-url=$S3_ENDPOINT_URL" "$@"
          }

          dest="s3://$S3_BUCKET_NAME/ci-pod-$JOB_COMPLETION_INDEX"
          _aws s3 cp "$ARTIFACT_DIR" "$dest" --recursive --acl public-read

          echo 'All done, bye.'

          exit 0
        image: "image-registry.openshift-image-registry.svc:5000/{{ local_ci_run_multi_namespace }}/{{ local_ci_run_multi_istag }}"
        imagePullPolicy: Always
        env:
        - name: MINIO_NAMESPACE
          value: "{{ local_ci_run_multi_minio_namespace }}"
        - name: S3_BUCKET_NAME
          value: "{{ local_ci_run_multi_minio_bucket_name }}"
{% if local_ci_run_multi_secret_name %}
        - name: {{ local_ci_run_multi_secret_env_key }}
          value: /secrets/{{ local_ci_run_multi_secret_name }}
{% endif %}
        - name: ARTIFACT_DIR
          value: /logs
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: [ALL]
          seccompProfile:
            type: RuntimeDefault
        runAsNonRoot: True
        volumeMounts:
        - mountPath: /logs
          name: artifacts
{% if local_ci_run_multi_secret_name %}
        - name: {{ local_ci_run_multi_secret_name }}
          mountPath: /secrets/{{ local_ci_run_multi_secret_name }}
{% endif %}
{% endif %}
      restartPolicy: Never
      volumes:
      - name: artifacts
        emptyDir: {}
{% if local_ci_run_multi_secret_name %}
      - name: {{ local_ci_run_multi_secret_name }}
        secret:
          secretName: {{ local_ci_run_multi_secret_name }}
{% endif %}
