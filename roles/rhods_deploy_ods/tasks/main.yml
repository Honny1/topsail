---
- name: Apply the RHODS catalog template
  template:
    src: "{{ rhods_install_ods_catalog }}"
    dest: "{{ artifact_extra_logs_dir }}/000_rhods_catalog.yml"
    mode: 0400

- name: Test if the RHODS catalog is available
  command: oc get -f "{{ artifact_extra_logs_dir }}/000_rhods_catalog.yml" -oname
  failed_when: false
  register: has_rhods_catalog_cmd

- name: Create RHODS catalog if it does not exist
  when: has_rhods_catalog_cmd.rc != 0
  command: oc apply -f "{{ artifact_extra_logs_dir }}/000_rhods_catalog.yml"

- name: Create RHODS namespaces
  shell:
    set -o pipefail;
    oc create ns {{ item }} --dry-run=client -oyaml | oc apply -f-
  loop:
  - redhat-ods-operator
  - redhat-ods-applications
  - redhat-ods-monitoring

- name: Create dummy secrets
  shell: |
    set -o pipefail
    oc create secret generic redhat-rhods-deadmanssnitch -n redhat-ods-monitoring \
               --from-literal="SNITCH_URL=https://nosnch.in/c2354d53d2" \
               -oyaml --dry-run=client \
               | oc apply -f-
    oc create secret generic redhat-rhods-pagerduty -n redhat-ods-monitoring \
               --from-literal=PAGERDUTY_KEY=not-a-key \
               -oyaml --dry-run=client \
               | oc apply -f-
    oc create secret generic addon-managed-odh-parameters -n redhat-ods-operator \
               --from-literal=notification-email=not-an-email@local.host \
               -oyaml --dry-run=client \
               | oc apply -f-
    oc create secret generic redhat-rhods-smtp -n redhat-ods-monitoring \
               --from-literal=host=dummy.svc \
               --from-literal=port=1234 \
               --from-literal=username=USERNAME \
               --from-literal=password=PASSWORD \
               -oyaml --dry-run=client \
               | oc apply -f-


- name: Test if the RHODS operator is installed
  command:
     oc get subscription.operators.coreos.com -A -oname
       -loperators.coreos.com/rhods-operator.openshift-operators
  failed_when: false
  register: has_rhods_operator_cmd

- name: Install RHODS operator
  when: not has_rhods_operator_cmd.stdout
  include_role:
    name: cluster_deploy_operator
  vars:
    cluster_deploy_operator_catalog: addon-managed-odh-catalog
    cluster_deploy_operator_manifest_name: rhods-operator
    cluster_deploy_operator_namespace: redhat-ods-operator
    cluster_deploy_operator_channel: beta
    cluster_deploy_operator_all_namespaces: "True"

- name: Get RHODS dashboard route host
  command: oc get route/rhods-dashboard -n redhat-ods-applications -ojsonpath={.spec.host}
  register: rhods_dashboard_hostname_cmd

- name: Wait for RHODS dashboard to be ready
  shell:
    curl -Ssf --insecure https://{{ rhods_dashboard_hostname_cmd.stdout }} || true
  args:
    warn: false # don't warn about using curl here
  register: wait_ods_dashboard
  until: '"The requested URL returned error: 403" in wait_ods_dashboard.stderr'
  retries: 40
  delay: 60

- name: Get JupyterLab route host
  command: oc get route/jupyterhub -n redhat-ods-applications -ojsonpath={.spec.host}
  register: jupyterlab_hostname_cmd

- block:
  - name: Wait for JupyterLab to be ready
    shell:
      set -o pipefail;
      curl -Ssf --insecure --verbose https://{{ jupyterlab_hostname_cmd.stdout }} |& grep '< HTTP/1'
    args:
      warn: false # don't warn about using curl here
    register: wait_jupyterlab
    until: '"302 Found" in wait_jupyterlab.stdout'
    retries: 40
    delay: 60
  rescue:
  - name: Capture JupiterHub curl output
    command:
      curl -Ssf --insecure --verbose https://{{ jupyterlab_hostname_cmd.stdout }}
    args:
      warn: false # don't warn about using curl here
  - name: fail
    fail: msg="JupiterHub didn't get ready"
