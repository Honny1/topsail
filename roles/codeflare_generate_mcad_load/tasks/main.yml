- name: Ensure that the MCAD controller is ready
  shell:
    set -o pipefail;
    oc get deploy/mcad-controller-mcad -n opendatahub --no-headers | awk '{print $2}'
  register: mcad_ready_cmd
  delay: 10
  retries: 10
  until: mcad_ready_cmd.stdout == "1/1"

- name: Ensure that there are no AppWrappers in the namespace
  command:
    oc delete appwrappers --all -n "{{ codeflare_generate_mcad_load_namespace }}"

- name: Create the src artifacts directory
  file:
    path: "{{ artifact_extra_logs_dir }}/src/"
    state: directory
    mode: '0755'

- name: Create the namespace if it does not exist
  shell:
    oc create ns "{{ codeflare_generate_mcad_load_namespace }}" -oyaml --dry-run=client | tee "{{ artifact_extra_logs_dir }}/src/namespace.yaml" | oc apply -f-

- name: Generate MCAD load
  block:
  - name: Generate the MCAD load
    shell:
      python3 "{{ mcad_load_generator }}" "{{ codeflare_generate_mcad_load_namespace }}" --dry-run=False

  - name: Define the variables
    set_fact:
      success_states: "{{ codeflare_generate_mcad_load_target_states | map('to_json') | join(', ') }}"
      failed_states: "{{ codeflare_generate_mcad_load_fail_if_states | map('to_json') | join(', ') }}"

  - name: Wait for the AppWrappers to complete
    shell: |
      set -o pipefail; set -e;
      appwrappers_json=$(oc get appwrappers -n {{ codeflare_generate_mcad_load_namespace }} -ojson)

      jq '.items[] | .metadata.name + " ==> "+ .status.state' -r <<< $appwrappers_json

      appwrapper_count=$(jq '.items | length' <<< $appwrappers_json)
      appwrapper_successes=$(jq '[.items[] | select(.status.state | IN({{ success_states }}))] | length' <<< $appwrappers_json)
      appwrapper_failed=$(jq '[.items[] | select(.status.state | IN({{ failed_states }}))] | length' <<< $appwrappers_json)

      if [[ "$appwrapper_failed" != 0 ]]; then
        echo "Found $appwrapper_failed AppWrapper(s) in one of the unexpected states '{{ failed_states }}' , aborting."
        exit 1 # fatal
      fi

      if [[ "$appwrapper_count" != "$appwrapper_successes" ]]; then
         echo "Only $appwrapper_successes/$appwrapper_count AppWrappers are in the expected states '{{ success_states }}'. Continue waiting ...."
         exit 2 # retry
      fi

      echo "All the AppWrappers have completed successfully. All done."
      exit 0 # done
    register: appwrappers_completed
    retries: 60
    delay: 30
    # until fatal or done
    until: appwrappers_completed.rc == 1 or appwrappers_completed.rc == 0
    # failed when fatal
    failed_when: appwrappers_completed.rc == 1

  always:
  - name: Capture the state of the AppWrappers
    shell: |
      oc get appwrappers -ojson -n {{ codeflare_generate_mcad_load_namespace }} > "{{ artifact_extra_logs_dir }}/appwrappers.json"
      oc get appwrappers -oyaml -n {{ codeflare_generate_mcad_load_namespace }} > "{{ artifact_extra_logs_dir }}/appwrappers.yaml"
      oc get appwrappers -n {{ codeflare_generate_mcad_load_namespace }} > "{{ artifact_extra_logs_dir }}/appwrappers.status"
      oc describe appwrappers -n {{ codeflare_generate_mcad_load_namespace }} > "{{ artifact_extra_logs_dir }}/appwrappers.desc"
    ignore_errors: true

  - name: Capture the state of the Jobs
    shell: |
      oc get Jobs -ojson -n {{ codeflare_generate_mcad_load_namespace }} > "{{ artifact_extra_logs_dir }}/jobs.json"
      oc get Jobs -oyaml -n {{ codeflare_generate_mcad_load_namespace }} > "{{ artifact_extra_logs_dir }}/jobs.yaml"
      oc describe Jobs -n {{ codeflare_generate_mcad_load_namespace }} > "{{ artifact_extra_logs_dir }}/jobs.desc"
      oc get Jobs -n {{ codeflare_generate_mcad_load_namespace }} > "{{ artifact_extra_logs_dir }}/jobs.status"
    ignore_errors: true

  - name: Capture the state of the Pods
    shell: |
      oc get Pods -ojson -n {{ codeflare_generate_mcad_load_namespace }} > "{{ artifact_extra_logs_dir }}/pods.json"
      oc get Pods -oyaml -n {{ codeflare_generate_mcad_load_namespace }} > "{{ artifact_extra_logs_dir }}/pods.yaml"
      oc describe Pods -n {{ codeflare_generate_mcad_load_namespace }} > "{{ artifact_extra_logs_dir }}/pods.desc"
      oc get Pods -owide -n {{ codeflare_generate_mcad_load_namespace }} > "{{ artifact_extra_logs_dir }}/pods.status"
    ignore_errors: true

  - name: Capture the logs of the MCAD controller
    shell: |
      oc logs deploy/mcad-controller-mcad -n opendatahub > "{{ artifact_extra_logs_dir }}/mcad-controller.log";
      oc logs deploy/mcad-controller-mcad -n opendatahub --previous 2>/dev/null > "{{ artifact_extra_logs_dir }}/mcad-controller.previous.log" || true
    ignore_errors: true

  - name: Capture the nodes of the cluster
    shell:
      oc get nodes -ojson > "{{ artifact_extra_logs_dir }}/nodes.json"
