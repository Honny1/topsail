apiVersion: serving.kserve.io/v1alpha1
kind: ServingRuntime
metadata:
  name: {{ watsonx_serving_deploy_model_serving_runtime_name }}
  namespace: {{ watsonx_serving_deploy_model_namespace }}
spec:
  containers:
  - name: kserve-container
    image: {{ watsonx_serving_deploy_model_sr_kserve_image }}
    command: [bash, -cex]
    args:
    - |
      echo "Starting kserver (TGIS) {% if watsonx_serving_deploy_model_sr_transformer_mute_logs %} without {% else %} _with_ {% endif %} stdout logs ..."
      exec text-generation-launcher --model-name=/mnt/models/artifacts/ {% if watsonx_serving_deploy_model_sr_transformer_mute_logs %} > "/tmp/tgis-logs" {% endif %}

    env:
    - name: TRANSFORMERS_CACHE
      value: /shared_model_storage/transformers_cache
{% for env_key, env_value in watsonx_serving_deploy_model_sr_kserve_extra_env_values.items() %}
    - name: "{{ env_key }}"
      value: "{{ env_value }}"
{% endfor %}

{% if watsonx_serving_deploy_model_secret_env_file_name is not none %}
    envFrom:
    - secretRef:
        name: {{ watsonx_serving_deploy_model_serving_runtime_name }}-secret
{% endif %}

    resources:
      requests:
        cpu: "{{ watsonx_serving_deploy_model_sr_kserve_resource_request.cpu }}"
        memory: "{{ watsonx_serving_deploy_model_sr_kserve_resource_request.memory }}Gi"
{% if watsonx_serving_deploy_model_sr_kserve_resource_request['nvidia.com/gpu'] %}
        nvidia.com/gpu: "{{ watsonx_serving_deploy_model_sr_kserve_resource_request['nvidia.com/gpu'] }}"
{% endif %}
      limits:
{% if watsonx_serving_deploy_model_limits_equals_requests %}
        cpu: "{{ watsonx_serving_deploy_model_sr_kserve_resource_request.cpu }}"
        memory: "{{ watsonx_serving_deploy_model_sr_kserve_resource_request.memory }}Gi"
{% endif %}
{% if watsonx_serving_deploy_model_sr_kserve_resource_request['nvidia.com/gpu'] %}
        nvidia.com/gpu: "{{ watsonx_serving_deploy_model_sr_kserve_resource_request['nvidia.com/gpu'] }}"
{% endif %}
    volumeMounts:
    - mountPath: /shared_model_storage/transformers_cache
      name: cache-volume
  # ---
  # --- transformer-container
  # ---
  - name: transformer-container
    image: {{ watsonx_serving_deploy_model_sr_transformer_image }}
    ports:
    - containerPort: 8085
      name: h2c
      protocol: TCP
{% for env_key, env_value in watsonx_serving_deploy_model_sr_transformer_extra_env_values.items() %}
    - name: "{{ env_key }}"
      value: "{{ env_value }}"
{% endfor %}
    resources:
      requests:
        cpu: "{{ watsonx_serving_deploy_model_sr_transformer_resource_request.cpu }}"
        memory: "{{ watsonx_serving_deploy_model_sr_transformer_resource_request.memory }}Gi"
      limits:
{% if watsonx_serving_deploy_model_limits_equals_requests %}
        cpu: "{{ watsonx_serving_deploy_model_sr_transformer_resource_request.cpu }}"
        memory: "{{ watsonx_serving_deploy_model_sr_transformer_resource_request.memory }}Gi"
{% endif %}
    volumeMounts:
    - name: config
      mountPath: /caikit/config/
      readOnly: true
  volumes:
  - name:  cache-volume
    emptyDir:
      sizeLimit: 180Gi
  - name: config
    configMap:
      name: {{ watsonx_serving_deploy_model_serving_runtime_name }}-caikit-tgis-config
  multiModel: false
  supportedModelFormats:
  # Note: this currently *only* supports caikit format models
  - autoSelect: true
    name: caikit
