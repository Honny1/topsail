---
- name: Get the name of the current project
  command:
    oc project --short
  register: project_name_cmd
  when: not watsonx_serving_capture_state_namespace

- name: Define the test environment
  set_fact:
    namespace: "{% if watsonx_serving_capture_state_namespace | length > 0 %}{{ watsonx_serving_capture_state_namespace }}{% else %}{{ project_name_cmd.stdout }}{% endif %}"

- name: Save the state of all the resources
  shell: |
    oc get all -n "{{ namespace }}" \
       > "{{ artifact_extra_logs_dir }}/all.status"
    oc get all -n "{{ namespace }}" -oyaml \
       > "{{ artifact_extra_logs_dir }}/all.yaml"
    oc get all -n "{{ namespace }}" -ojson \
       > "{{ artifact_extra_logs_dir }}/all.json"
    oc describe all -n "{{ namespace }}" \
       > "{{ artifact_extra_logs_dir }}/all.desc"
  ignore_errors: true

- name: Save the state of the serving resources
  shell: |
    oc get serving,inferenceservice,servingruntime -n "{{ namespace }}" \
       > "{{ artifact_extra_logs_dir }}/serving.status"
    oc get serving,inferenceservice,servingruntime -n "{{ namespace }}" -oyaml \
       > "{{ artifact_extra_logs_dir }}/serving.yaml"
    oc get serving,inferenceservice,servingruntime -n "{{ namespace }}" -ojson \
       > "{{ artifact_extra_logs_dir }}/serving.json"
    oc describe serving,inferenceservice,servingruntime -n "{{ namespace }}" \
       > "{{ artifact_extra_logs_dir }}/serving.desc"
  ignore_errors: true

- name: Create the pods directory
  file:
    path: "{{ artifact_extra_logs_dir }}/pods"
    state: directory
    mode: '0755'

- name: Get the names of the pods
  command:
    oc get pods
       -n "{{ namespace }}"
       -ojsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}'
  register: pod_names_cmd

- name: Capture the logs of the pods
  loop: "{{ pod_names_cmd.stdout_lines }}"
  shell:
    oc logs pod/{{ item }}
       -n {{ namespace }}
       --all-containers --prefix
       > "{{ artifact_extra_logs_dir }}/pods/{{ item }}.log"
  ignore_errors: true
