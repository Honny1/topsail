- name: Set the artifact directory path for the shared project
  set_fact:
    project_artifacts_dir: "{{ artifact_extra_logs_dir }}/artifacts-sutest/project_{{ rhods_notebook_namespace }}"

- name: Check if the cluster has the notebook CRD
  command:
    oc get crd notebooks.kubeflow.org
  register: has_notebooks_crd
  failed_when: false

- name: Count the notebooks in the {{ rhods_notebook_namespace }} namespace
  environment:
    KUBECONFIG: '{{ sut_cluster_kubeconfig }}'
  shell:
    set -o pipefail;
    oc get pods -oname
       -n {{ rhods_notebook_namespace }}
       | (grep "{{ rhods_notebook_ods_ci_scale_test_username_prefix }}" || true)
       | wc -l
  register: notebook_namespace_pod_count_cmd


- name: Count the notebooks in the DSG namespaces
  environment:
    KUBECONFIG: '{{ sut_cluster_kubeconfig }}'
  shell:
    set -o pipefail;
    oc get pods -oname
       -lopendatahub.io/dashboard=true -A
       | (grep "{{ rhods_notebook_ods_ci_scale_test_username_prefix }}" || true)
       | wc -l
  register: dsg_namespaces_pod_count_cmd


- name: Capture the artifacts of the {{ rhods_notebook_namespace }} sutest project
  when: notebook_namespace_pod_count_cmd.stdout != "0"
  environment:
    KUBECONFIG: '{{ sut_cluster_kubeconfig }}'
  block:
  - name: Create the sutest {{ rhods_notebook_namespace }} artifacts directory
    file:
      path: "{{ project_artifacts_dir }}"
      state: directory
      mode: '0755'

  - name: Get the state of the all the resources
    shell:
      oc get all
         -n {{ rhods_notebook_namespace }}
         > "{{ project_artifacts_dir }}/all.status"
    ignore_errors: yes

  - name: Get the status of the notebook resources
    shell:
      oc get notebooks
         -n {{ rhods_notebook_namespace }}
         > "{{ project_artifacts_dir }}/notebooks.status"
    ignore_errors: yes
    when: has_notebooks_crd.rc == 0

  - name: Get the status of the notebook Pods
    shell:
      oc get pods -owide
         -n {{ rhods_notebook_namespace }}
          > "{{ project_artifacts_dir }}/notebook_pods.status"
    ignore_errors: yes

  - name: Get the description of the notebook Pods
    shell:
      oc describe pods
         -n {{ rhods_notebook_namespace }}
         > "{{ project_artifacts_dir }}/notebook_pods.descr"
    ignore_errors: yes

  - name: Get the definition of the notebook resources
    shell:
      oc get notebooks -oyaml
         -n {{ rhods_notebook_namespace }}
         > "{{ project_artifacts_dir }}/notebooks.yaml"
    ignore_errors: yes
    when: has_notebooks_crd.rc == 0

  - name: Get the definition of the notebook Pods
    shell:
      oc get pods -oyaml
         -n {{ rhods_notebook_namespace }}
         > "{{ project_artifacts_dir }}/notebook_pods.yaml"
    ignore_errors: yes

  - name: Terminate the notebooks
    when:
    - has_notebooks_crd.rc == 0
    - rhods_notebook_ods_ci_scale_test_stop_notebooks_on_exit
    shell:
      set -o pipefail;
      oc get notebooks -oname -n {{ rhods_notebook_namespace }} |
        xargs --no-run-if-empty --replace
              oc annotate {} --overwrite
                 kubeflow-resource-stopped=stopped-by-ci-artifacts
                 -n {{ rhods_notebook_namespace }}
                 -oname > /dev/null

# DSG

- name: Set the artifact directory path for the DSG projects
  set_fact:
    project_artifacts_dir: "{{ artifact_extra_logs_dir }}/artifacts-sutest/project_dsg"

- name: Capture the artifacts of the sutest DSG projects
  when: dsg_namespaces_pod_count_cmd.stdout != "0"
  environment:
    KUBECONFIG: '{{ sut_cluster_kubeconfig }}'
  block:
  - name: Create the sutest DSG artifacts directory
    file:
      path: "{{ project_artifacts_dir }}"
      state: directory
      mode: '0755'

  - name: Get the state of the all the resources
    shell:
      oc get all --show-labels -owide
         -A | grep "{{ rhods_notebook_ods_ci_scale_test_username_prefix }}"
         > "{{ project_artifacts_dir }}/all.status"
    ignore_errors: yes

  - name: Get the status of the notebook resources
    shell:
      oc get notebooks -owide
         -A | grep "{{ rhods_notebook_ods_ci_scale_test_username_prefix }}"
         > "{{ project_artifacts_dir }}/notebooks.status"
    ignore_errors: yes

  - name: Get the status of the notebook Pods
    shell:
      oc get pods -owide
         -lopendatahub.io/dashboard=true -A | grep "{{ rhods_notebook_ods_ci_scale_test_username_prefix }}"
          > "{{ project_artifacts_dir }}/notebook_pods.status"
    ignore_errors: yes

  - name: Get the description of the notebook Pods
    shell:
      oc describe pods
         -lopendatahub.io/dashboard=true -A | grep "{{ rhods_notebook_ods_ci_scale_test_username_prefix }}"
         > "{{ project_artifacts_dir }}/notebook_pods.descr"
    ignore_errors: yes

  - name: Get the definition of the notebook resources
    shell:
      oc get notebooks -oyaml
         -lopendatahub.io/dashboard=true -A
         > "{{ project_artifacts_dir }}/notebooks.yaml"
    ignore_errors: yes

  - name: Get the definition of the notebook Pods
    shell:
      oc get pods -oyaml
         -lopendatahub.io/dashboard=true -A
         > "{{ project_artifacts_dir }}/notebook_pods.yaml"
    ignore_errors: yes

    # this will catch too many statefulsets, but we cannot filter only the Notebook ones ...
  - name: Get the definition of all the stateful sets
    shell:
      oc get statefulsets -oyaml -A
         > "{{ project_artifacts_dir }}/statefulsets.yaml"
    ignore_errors: yes

  - name: Terminate the notebooks
    shell:
      set -o pipefail;
      oc get notebooks -A
         -ojsonpath='{range .items[*]}{.metadata.name}{" -n "}{.metadata.namespace}{"\n"}{end}'
           | xargs --no-run-if-empty --replace
               bash -c "oc annotate notebook/{}
                           --overwrite kubeflow-resource-stopped=stopped-by-ci-artifacts
                           -oname" > /dev/null
    when:
    - has_notebooks_crd.rc == 0
    - rhods_notebook_ods_ci_scale_test_stop_notebooks_on_exit
