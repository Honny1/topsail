{% set secrets_location = false | or_env(secrets.dir.env_key) %}
{% if not secrets_location %}
  {{ ("ERROR: secrets_location must be defined (secrets.dir.name="+ secrets.dir.name|string +" or env(secrets.dir.env_key=" + secrets.dir.env_key|string + ")) ") | raise_exception }}
{% endif %}
{% set s3_ldap_password_location = secrets_location + "/" + secrets.s3_ldap_password_file %}

# ---


codeflare generate_mcad_load:
  namespace: {{ tests.mcad.namespace }}
  distribution: {{ tests.mcad.distribution }}
  # the other parameters are passed at runtime with the --extra flag.

codeflare cleanup_appwrappers:
  namespace: {{ tests.mcad.namespace }}

cluster fill_workernodes:
  namespace: {{ clusters.sutest.worker.fill_resources.namespace }}
  label_selector: {{ clusters.sutest.worker.label }}

cluster set_scale:
  name: {{ clusters.sutest.compute.machineset.name }}
  instance_type: SET_AT_RUNTIME
  scale: SET_AT_RUNTIME

rhods wait_odh:
  namespace: {{ odh.namespace }}

gpu_operator enable_time_sharing:
  replicas: {{ gpu.time_sharing.replicas }}

gpu_operator run_gpu_burn:
  keep_resources: true
  namespace: {{ tests.mcad.namespace }}
  runtime: 30 #s
  ensure_has_gpu: false

#
# Prepare User Pods
#
  
base_image/utils build_push_image:
  namespace: "{{ base_image.namespace }}"
  image_local_name: "{{ base_image.imagestream }}"
  tag: "{{ base_image.repo.tag }}"
  _istag: "{{ base_image.imagestream }}:{{ base_image.repo.tag }}"

  git_repo: "{{ base_image.repo.url }}"
  git_ref: "{{ base_image.repo.ref }}" # may be overwritten at runtime with the PR ref
  dockerfile_path: "{{ base_image.repo.dockerfile_path }}"

extended_image/utils build_push_image:
  namespace: "{{ base_image.namespace }}"
  image_local_name: "{{ base_image.imagestream }}"
  tag: "{{ base_image.extend.tag }}"
  _istag: "{{ base_image.imagestream }}:{{ base_image.extend.tag }}"

  dockerfile_path: "{{ base_image.extend.local_dockerfile_path }}"
  from_imagetag: "{{ base_image.imagestream }}:{{ base_image.repo.tag }}"
  
cluster deploy_redis_server:
{% set redis_internal_address = "redis."+base_image.namespace+".svc" %}
  namespace: "{{ base_image.namespace }}"

cluster deploy_minio_s3_server:
  namespace: "{{ base_image.namespace }}"
  secret_properties_file: {{ s3_ldap_password_location }}
  bucket_name: {{ base_image.minio.bucket_name }}
