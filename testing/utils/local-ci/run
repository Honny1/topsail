#! /usr/bin/python3

import sys, os
import pathlib
import subprocess
import fire
import logging
logging.getLogger().setLevel(logging.INFO)
import datetime
import time

import yaml
import jsonpath_ng

def run(command):
    logging.info(command)
    return subprocess.run(command, check=True, shell=True)

TESTING_UTILS_LOCALCI_DIR = pathlib.Path(__file__).absolute().parent

os.environ["CI_ARTIFACTS_FROM_CONFIG_FILE"] = str(TESTING_UTILS_LOCALCI_DIR / "config.yaml")
os.environ["CI_ARTIFACTS_FROM_COMMAND_ARGS_FILE"] = str(TESTING_UTILS_LOCALCI_DIR / "command_args.yaml")

with open(os.environ["CI_ARTIFACTS_FROM_CONFIG_FILE"]) as config_f:
    config = yaml.safe_load(config_f)

def get_config(jsonpath):
    return jsonpath_ng.parse(jsonpath).find(config)[0].value

def get_command_arg(command, args):
    try:
        proc = subprocess.run(f"./run_toolbox.py from_config {command} --show_args {args}", check=True, shell=True, capture_output=True)
    except subprocess.CalledProcessError as e:
        logging.error(e.stderr.decode("utf-8").strip())
        raise

    return proc.stdout.decode("utf-8").strip()


def local_ci_prepare():
    """
    Prepares the cluster for running Local-CI commands.
    """

    namespace = get_config("base_image.namespace")
    service_account = get_config("base_image.user.service_account")
    role = get_config("base_image.user.role")

    #
    # Prepare the container image
    #

    # keep this command (utils build_push_image) first, it creates the namespace

    istag = get_command_arg("utils build_push_image", "_istag")
    try:
        run(f"oc get istag {istag} -n {namespace} -oname >/dev/null")
        has_istag = True
        logging.info(f"Image {istag} already exists in namespace {namespace}. Don't build it.")
    except subprocess.CalledProcessError:
        has_istag = False

    if not has_istag:
        run("./run_toolbox.py from_config utils build_push_image")

    #
    # Prepare the ServiceAccount
    #

    run(f"oc create serviceaccount {service_account} -n {namespace} --dry-run=client -oyaml | oc apply -f-")
    run(f"oc adm policy add-cluster-role-to-user {role} -z {service_account} -n {namespace}")

    #
    # Prepare the Secrets
    #

    for secret_name, secret_data in get_config("secrets").items():
        secret_env_key = secret_data["env_key"]

        run(f"oc create secret generic {secret_name} --from-file=${secret_env_key} -n {namespace} --dry-run=client -oyaml | oc apply -f-")

    return None


def local_ci_run(workload, workload_identifier=None, ts_id=None, pr_number=None, export=True, step=None,
                 check_clean_diff=True, check_branch_synced=True, pr_config=None, retrieve_artifacts=True,
                 test_args=None):
    """
    Runs a CI workload.

    Args:
      workload: The name of the workload to execute
      workload_identifier: An identifier to use when exporting the artifacts (default: the workload name)
      ts_id: A timestamp identifier to use when exporting the artifacts (default: the current date/time)
      export: A flag to disable exporting the artifacts
      pr_number: The GitHub PR number to use for running the command (default: the 'main' branch)
      step: The pipeline step to execute. If empty (default), execute all the steps of the pipeline.
      check_clean_diff: If True, bail out if `git diff` is dirty.
      check_branch_synced: If True, bail out if the git branch isn't synced with its upstream branch.
      pr_config: Optional path to a PR config file (avoids fetching Github PR json).
      retrieve_artifacts: If False, do not retrieve locally the test artifacts.
      test_args: List of arguments to give to the test. Overrides what is found in the configuration file.
    """
    namespace = get_config("base_image.namespace")

    try:
        logging.info("Checking if `git diff` is clean ...")
        run("git diff --quiet")
        diff_is_clean = True
    except subprocess.CalledProcessError:
        diff_is_clean = False
        if check_clean_diff:
            logging.error(f"Git diff isn't clean, bailing out.")
            logging.info("Pass the flag --check-clean-diff=False to bypass this.")
            sys.exit(1)
        else:
            logging.warning(f"Git diff isn't clean.")

    try:
        logging.info("Checking if the branch is synced with upstream ...")
        run('test "$(git rev-parse HEAD)" == "$(git rev-parse $(git rev-parse --abbrev-ref --symbolic-full-name @{u}))"')
    except subprocess.CalledProcessError:
        if not diff_is_clean:
            logging.warning(f"Git branch isn't in sync with its upstream branch.")
        elif check_branch_synced:
            logging.error(f"Git branch isn't in sync with its upstream branch.")
            logging.info("Pass the flag --check-branch-synced=False or --check-clean-diff=False to bypass this.")
            sys.exit(1)

    workloads = get_config("workloads")
    if not workload in workloads:
        logging.error(f"Invalid workload '{workload}'. Must be in {', '.join(workloads.keys())}")
        sys.exit(1)

    env_ci_artifact_base_dir = pathlib.Path(os.environ.get("CI_ARTIFACT_BASE_DIR", "/tmp"))
    ci_artifact_base_dir = env_ci_artifact_base_dir / f"ci-artifacts_{time.strftime('%Y%m%d-%H%M')}" / workload

    workload_data = workloads[workload]
    command_group = workload_data["command_group"]

    _test_args = test_args or workload_data.get("test_args", []) or []
    if isinstance(test_args, str):
        logging.error(f"Invalid test args {_test_args} for workload {workload}. Expected a list of strings. In the CLI, add [] around the single element if needed.")
        sys.exit(1)

    test_args = list(_test_args)

    if workload_identifier is None:
        workload_identifier = workload

    if ts_id is None:
        ts_id = datetime.datetime.now().strftime("%Y%m%d_%H%M")

    if step and step not in workload_data["steps"]:
        logging.error(f"Invalid step name {step} for workload {workload}. Expected one of '{', '.join(workload_data['steps'])}'")
        sys.exit(1)

    steps = workload_data["steps"] \
        if not step else [step]

    try:
        logging.info(f"Checking that no Pod is running in {namespace} ...")
        run(f"oc get pod --field-selector=status.phase==Running -oname -n {namespace} | grep .")
        logging.error(f"Found Pods running in {namespace}, bailing out.")
        sys.exit(1)
    except subprocess.CalledProcessError:
        pass

    logging.info("Cleanup up the workflow Pods ...")
    for step_idx, step_name in enumerate(steps):
        run(f"oc delete pod/{workload}-{step_idx:03d}-{step_name} -n {namespace} --ignore-not-found")

    failed = []
    for step_idx, step_name in enumerate(steps):
        if failed and not workload_data["steps"][step_name].get("always_run", False):
            print(f"Test step '{failed}' failed, skipping {step_name} ...")
            continue

        step_dirname = f"{step_idx:03d}__{step_name}"

        os.environ["ARTIFACT_DIR"] = str(ci_artifact_base_dir / step_dirname)
        command = workload_data["steps"][step_name]["command"]

        extra = dict(
            ci_command=command,
            pr_number=pr_number,
            export_identifier=f"{workload_identifier}/{step_dirname}",
            export_ts_id=f"{ts_id}",
            export=export,
            pod_name=f"{workload}-{step_idx:03d}-{step_name}".replace("_", "-"),
            test_name=workload,
            test_args=test_args
        )

        if pr_config is not None:
            extra["pr_config"] = pr_config

        if pr_number:
            extra["update_git"] = True

        try:
            run(f'./run_toolbox.py from_config local_ci run --suffix {command_group} --extra "{extra}"')
        except subprocess.CalledProcessError as e:
            logging.error(f"Step {step_dirname} failed (command '{e.cmd}') --> {e.returncode}")
            failed.append(step_dirname)

    if failed:
        logging.error(f"Steps [{', '.join(failed)}] of workload '{workload}' failed :/")
        sys.exit(1)

class LocalCi:
    """
    Commands for launching the Local CI
    """

    def __init__(self):
        self.prepare = local_ci_prepare
        self.run = local_ci_run

def main():
    # Print help rather than opening a pager
    fire.core.Display = lambda lines, out: print(*lines, file=out)

    fire.Fire(LocalCi())


if __name__ == "__main__":
    try:
        sys.exit(main())
    except subprocess.CalledProcessError as e:
        logging.error(f"Command '{e.cmd}' failed --> {e.returncode}")
        sys.exit(1)
