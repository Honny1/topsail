---
- name: Ensure that the lock is owned
  include_role:
    name: jump_ci_ensure_lock
    # sets cluster_kubeconfig
  vars:
    jump_ci_ensure_lock_cluster: "{{ jump_ci_prepare_step_cluster }}"

- name: Fetch the name of the image to use
  shell:
    cat "/tmp/{{ jump_ci_prepare_step_cluster }}/pod.image"
  register: pod_image_cmd
  failed_when: false

- name: Fail if the image file is not set
  when: pod_image_cmd.rc != 0
  fail: msg="The pod image isn't prepared. Did the 'prepare_topsail' step run?"

- name: Generate the step artifacts dirname
  set_fact:
    step_artifact_dir: "/tmp/{{ jump_ci_prepare_step_cluster }}/test/{{ jump_ci_prepare_step_step }}"

- name: Ensure that the step artifacts dirname directory exists
  ansible.builtin.file:
    state: directory
    path: "{{ step_artifact_dir }}"
    mode: '0755'

- name: Copy the env file
  ansible.builtin.copy:
    src: "{{ jump_ci_prepare_step_env_file }}"
    dest: "{{ step_artifact_dir }}/test_env"
    mode: '0644'

- name: Copy the variables_overrides file
  ansible.builtin.copy:
    src: "{{ jump_ci_prepare_step_variables_overrides_file }}"
    dest: "{{ step_artifact_dir }}/variable_overrides.yaml"
    mode: '0644'

- name: Append the extra variables_overrides
  shell: |
    cat <<EOF >> {{ step_artifact_dir }}/variable_overrides.yaml
    {% for k, v in (jump_ci_prepare_step_extra_variables_overrides or {}).items() %}
    {{ k }}: {{ v }}
    {% endfor %}
    EOF

- name: Ensure that the secrets directory exists
  ansible.builtin.file:
    state: directory
    path: "/tmp/{{ jump_ci_prepare_step_cluster }}/secrets/{{ jump_ci_prepare_step_secrets_path_env_key }}"
    mode: '0755'

- name: Copy the secrets to the jump host
  ansible.posix.synchronize:
    src: "{{ lookup('env', jump_ci_prepare_step_secrets_path_env_key) }}/"
    dest: "/tmp/{{ jump_ci_prepare_step_cluster }}/secrets/{{ jump_ci_prepare_step_secrets_path_env_key }}/"
    mode: "push"
  when: jump_ci_prepare_step_secrets_path_env_key


- name: Prepare the entrypoint script
  shell: |
    cat <<EOF >> {{ step_artifact_dir }}/entrypoint.sh
    source ""

    image=
    echo run podman $command ...

    podman run \
      --name topsail-on-{{ jump_ci_prepare_step_cluster }} \
      \
      --volume "{{ step_artifact_dir }}:/logs/artifacts" \
      --env ARTIFACT_DIR="/logs/artifacts" \
      \
      --volume /tmp/{{ jump_ci_prepare_step_cluster }}/secrets:/run/secrets \
      --env {{ jump_ci_prepare_topsail_secrets_path_env_key }}="/run/secrets/{{ jump_ci_prepare_topsail_secrets_path_env_key }}" \
      \
      --volume {{ cluster_kubeconfig }}:/run/secrets/kubeconfig \
      --env KUBECONFIG="/run/secrets/kubeconfig" \
      \
      --volume {{ step_artifact_dir }}/test_env:/run/secrets/test_env
      \
      "{{ pod_image_cmd.stdout | trim}}" \
      bash -ce "source /run/secrets/test_env; exec $run rhoai test {{ jump_ci_prepare_step_step }}"
    EOF
