---
# Shared task for optimized image pulling/loading
# Usage:
# - include_tasks: "../../shared_tasks/pull_image.yml"
#   vars:
#     image_name: "quay.io/example/image:tag"
# Requires: binary_path, additional_args, image_name variables
# Note: Image names are sanitized by replacing all special characters with '_'

- name: Validate required variables for image pulling
  fail:
    msg: "Required variable '{{ item }}' is not defined"
  when: vars[item] is not defined
  loop:
    - binary_path
    - image_name
    - environment

- name: Set path to directory with images tarfiles
  set_fact:
    images_path: "{{ vars['environment'][0]['HOME'] + '\\images' if ansible_os_family == 'Windows' else vars['environment'][0]['HOME'] + '/images' }}"

- name: Ensure images directory exists (Unix/Linux/macOS)
  file:
    path: "{{ images_path }}"
    state: directory
    mode: '0755'
  when: ansible_os_family != 'Windows'

- name: Ensure images directory exists (Windows)
  ansible.windows.win_file:
    path: "{{ images_path }}"
    state: directory
  when: ansible_os_family == 'Windows'

- name: Set image tarfile path (Unix/Linux/macOS)
  set_fact:
    image_tarfile: "{{ images_path }}/{{ image_name | regex_replace('[^a-zA-Z0-9_-]', '_') }}.tar"
  when: ansible_os_family != 'Windows'

- name: Set image tarfile path (Windows)
  set_fact:
    image_tarfile: "{{ images_path }}\\{{ image_name | regex_replace('[^a-zA-Z0-9_-]', '_') }}.tar"
  when: ansible_os_family == 'Windows'

- name: Check if image tarfile exists (Unix/Linux/macOS)
  stat:
    path: "{{ image_tarfile }}"
  register: tarfile_stat_unix
  when: ansible_os_family != 'Windows'

- name: Check if image tarfile exists (Windows)
  ansible.windows.win_stat:
    path: "{{ image_tarfile }}"
  register: tarfile_stat_windows
  when: ansible_os_family == 'Windows'

- name: Set unified tarfile status (Unix)
  set_fact:
    tarfile_exists: "{{ tarfile_stat_unix.stat.exists | default(false) }}"
  when: ansible_os_family != 'Windows'

- name: Set unified tarfile status (Windows)
  set_fact:
    tarfile_exists: "{{ tarfile_stat_windows.stat.exists | default(false) }}"
  when: ansible_os_family == 'Windows'

- name: Load image from local tarfile (Unix/Linux/macOS)
  become: "{{ rootfull | default(omit) }}"
  shell: "{{ binary_path }} {{ additional_args | default('') }} load -i {{ image_tarfile }}"
  when: ansible_os_family != 'Windows' and tarfile_exists


- name: Load image from local tarfile (Windows)
  ansible.windows.win_shell: "{{ binary_path }} {{ additional_args | default('') }} load -i {{ image_tarfile }}"
  when: ansible_os_family == 'Windows' and tarfile_exists

- name: Pull image from registry (Unix/Linux/macOS)
  become: "{{ rootfull | default(omit) }}"
  shell: "{{ binary_path }} {{ additional_args | default('') }} pull {{ image_name }}"
  when: ansible_os_family != 'Windows' and not tarfile_exists

- name: Pull image from registry (Windows)
  ansible.windows.win_shell: "{{ binary_path }} {{ additional_args | default('') }} pull {{ image_name }}"
  when: ansible_os_family == 'Windows' and not tarfile_exists

