{% set secrets_location = false | or_env(secrets.dir.env_key) %}
{% if not secrets_location %}
  {{ ("ERROR: secrets_location must be defined (secrets.dir.name="+ secrets.dir.name|string +" or env(secrets.dir.env_key=" + secrets.dir.env_key|string + ")) ") | raise_exception }}
{% endif %}
{% set s3_ldap_password_location = secrets_location + "/" + secrets.s3_ldap_password_file %}

# ---

sutest/cluster set_scale:
  name: {{ clusters.sutest.compute.machineset.name }}
{% if clusters.sutest.compute.dedicated %}
  taint: {{ clusters.sutest.compute.machineset.taint.key }}={{ clusters.sutest.compute.machineset.taint.value }}:{{ clusters.sutest.compute.machineset.taint.effect }}
{% endif %}
  disk_size: {{ clusters.sutest.compute.machineset.disk_size }}
  spot: {{ clusters.sutest.compute.machineset.spot }}
  instance_type: SET_AT_RUNTIME
  scale: SET_AT_RUNTIME

# ---

gpu_operator enable_time_sharing:
  replicas: {{ gpu.time_sharing.replicas }}

cluster fill_workernodes:
  namespace: {{ clusters.sutest.worker.fill_resources.namespace }}
  label_selector: {{ clusters.sutest.worker.label }}

#
# Scale test - deploy RHODS
#

rhods deploy_ods:
  catalog_image: {{ rhods.catalog.image }}
  tag: {{ rhods.catalog.tag }}
  channel: {{ rhods.catalog.channel }}
  version: {{ rhods.catalog.version }}

codeflare cleanup_appwrappers:
  namespace: {{ tests.schedulers.namespace }}

codeflare generate_scheduler_load:
  namespace: {{ tests.schedulers.namespace }}
  distribution: {{ tests.schedulers.distribution }}
  # the other parameters are passed at runtime with the --extra flag.
